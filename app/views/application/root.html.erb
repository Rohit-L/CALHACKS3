<script type="text/javascript">
    window.DEMO = true;

    var client;
    var request;

    function useMic() {
        return true;
    }

    function getMode() {
        return Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionMode.shortPhrase;
    }

    function getKey() {
        return "20b78ad78eae48bd827cb076730f9a43";
    }

    function getLanguage() {
        return "en-us";
    }

    function clearText() {
        document.getElementById("mic-output").value = "";
    }

    function setText(text) {
        window.micActive = false;
        setTimeout(() => {
            $(".mic-loader").css({"display": "none"});
            $(".mic-output").text("");
            if (text.entities && text.entities.length > 0) {
                if (text.intents[0].intent == "SearchEmotions") {
                    window.filterPictures(text.entities[0].entity, true)
                    $('.mic-modal-close').click();
                    $('#mic-output').text("");

                } else {
                    window.filterPictures(text.entities[0].entity, false)
                    $('.mic-modal-close').click();
                    $('#mic-output').text("");
                }
            } else {
                $('#mic-output').text("Uh Oh! Something went wrong.");
                setTimeout(() => {
                    $('.mic-modal-close').click();
                    $('#mic-output').text("");
                }, 2000)
            }
        }, 2000);
    }

    function getLuisConfig() {
        var appid = "063c5a5a-63da-4e46-acdf-4a00ac3977f0"
        var subid = "2bc13320877b449da37c3cf21df1ecb9";
        if (appid.length > 0 && subid.length > 0) {
            return { appid: appid, subid: subid };
        }
        return null;
    }

    function handleJSONWebResponse(xhr) {
        if (typeof (xhr.response) == "string") {
            return JSON.parse(xhr.response);
        }
        return xhr.response;
    }

    var Task = (function () {
        function Task() {
            this.completed = false;
            this.startTime = Date.now();
        }
        Task.prototype.complete = function () {
            this.signalComplete(true);
        };
        Task.prototype.resolve = function (result) {
            this.signalComplete(result);
        };
        Task.prototype.done = function (cb) {
            if (this.completed) {
                cb(this.result);
                return;
            }
            this.cb = cb;
        };
        Object.defineProperty(Task.prototype, "elapsedTime", {
            get: function () {
                return (Date.now() - this.startTime) / 1000;
            },
            enumerable: true,
            configurable: true
        });
        Task.prototype.signalComplete = function (result) {
            this.result = result;
            this.completed = true;
            if (this.cb) {
                this.cb(this.result);
            }
        };
        return Task;
    })();

    var LuisClient = (function () {
        function LuisClient(prefs) {
            this._prefs = prefs;
            switch(prefs.authenticationScheme) {
                case "MAIS":
                    this._auth = new CognitiveServiceAuthenticator();
                    break;
                case "ADM":
                    this._auth = new AdmAuthenticator();
                    break;
            }
        }
        LuisClient.kServiceUrl = "https://api.projectoxford.ai/luis/v1/application?subscription-key=";
        LuisClient.prototype.getIntent = function (text) {
            var task = new Task();
            var request = new XMLHttpRequest();
            request.open('GET', [
                LuisClient.kServiceUrl, 
                this._prefs.subid, 
                "&id=", 
                this._prefs.appid, 
                "&q=", 
                text
            ].join(""), true);
            request.onload = function () {
                console.log("Luis onload");
                if (request.readyState == 4 && request.status === 200) {
                    var response = handleJSONWebResponse(request);
                    task.resolve(request.response);
                } else {
                    task.resolve(null);
                }
            };
            request.send();
            return task;
        };
        return LuisClient;
    })();

    window.luis = new LuisClient(getLuisConfig());

    function start() {

        var mode = getMode();
        var luisCfg = getLuisConfig();
        clearText();

        if (useMic()) {
            if (luisCfg) {
                var mediaNav = navigator;
                var acWindow = window;
                mediaNav.getUserMedia = mediaNav.getUserMedia || mediaNav.mozGetUserMedia || mediaNav.webkitGetUserMedia || mediaNav.msGetUserMedia || CreateActiveXObject("Bing.GetUserMedia");

                (navigator).getUserMedia({
                    audio: true
                }, function (stream) {

                    // Will be used when we need to make a visual display of recording audio
                    window.speechEvents = hark(stream, {});

                    window.speechEvents.on('speaking', function() {
                      console.log('speaking');
                    });

                    window.speechEvents.on('stopped_speaking', () => {
                      console.log('stopped_speaking');
                    });

                    window.speechEvents.on('volume_change', (vol, threshold) => {
                      var height = vol + 50 < 0 ? 10 : ((vol + 50) / 25) * 50;
                      if (height > 50) {
                        height = 50;
                      }
                      height = parseInt($('.mic-bar-1').css("height"), '10') + ((height - parseInt($('.mic-bar-1').css("height"), '10')) * 0.1);
                      $('.mic-bar-6').css({height: parseInt($('.mic-bar-5').css("height"), '10')});
                      $('.mic-bar-5').css({height: parseInt($('.mic-bar-4').css("height"), '10')});
                      $('.mic-bar-4').css({height: parseInt($('.mic-bar-3').css("height"), '10')});
                      $('.mic-bar-3').css({height: parseInt($('.mic-bar-2').css("height"), '10')});
                      $('.mic-bar-2').css({height: parseInt($('.mic-bar-1').css("height"), '10')});
                      $('.mic-bar-1').css({height: height});
                    })
                }, function() {});

                  var recognition = new webkitSpeechRecognition();
                  window.micActive = true;
                  recognition.continuous = false;
                  recognition.interimResults = true;
                  recognition.onresult = function(event) {
                    console.log(event.results[0][0].transcript);
                    $('#mic-output').text(event.results[0][0].transcript);
                    if (event.results[0].isFinal) {
                        window.luis.getIntent(event.results[0][0].transcript).done(function(r) {
                            setText(JSON.parse(r));
                        });
                    }
                  }

                  recognition.onend = function(event) {

                    setTimeout(() => {
                        $('#mic-output').text("");
                        $('.mic-loader').css({"display": "block"});
                        setTimeout($ => {
                            if (window.micActive) {
                                $(".mic-loader").css({"display": "none"});
                                $(".mic-output").text("");
                                $('.mic-modal-close').click();
                            }
                        }, 8000)
                    }, 500);
                    window.speechEvents.stop()

                  }

                  recognition.start();
            }
        }
    }
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/2.5.0/fuse.min.js" type="text/javascript"></script>
<div id="app" class="hide"></div>

<style>
h2 {
  font-family: verdana;
  color: white;
}

h3 {
  font-family: verdana;
  color: white;
  font-size: 25px;
}

.vcenter {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

html, body {
  height: 100%;
  width: 100%;
  background-color: #141e2a;
}

.splash {
    height: 100%;
    width: 100%;
    background-color: #141e2a;
    z-index: 60000;
}

.splash-title {
    position: absolute;
    top: 30%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.splash-loader {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.splash-footer {
    position: absolute;
    top: 75%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.icon-row {
    position: absolute;
    bottom: 5%;
    left: 50%;
    transform: translateX(-50%);
}

.icon {
    max-height: 60px !important;
    max-width: 100px !important;
    transform: translateY(-50%);
    filter: brightness(0) invert(1); 
}

</style>

<div class="animated splash container vcenter">
  <div class="row splash-title">
    <div class="col s12 center">
      <h2>Relive</h2>
    </div>
  </div>
  <div class="row splash-loader">
    <div class="col s12 center">
        <div class="atom large">
          <div class="electron"></div>
          <div class="electron"></div>
          <div class="electron"></div>
          <div class="electron"></div>
        </div>
    </div>
  </div>
  <div class="row splash-footer">
    <div class="col s12 center">
      <h3>Powered By</h3>
    </div>
  </div>
  <div class="row icon-row">
    <div class="col s4 center">
        <img src="https://www.thecerbatgem.com/logos/square-inc-logo.png" class="icon"/>
    </div>
    <div class="col s4 center">
        <img src="https://serverblend.com/wp-content/uploads/2013/06/microsoft-logo.png" class="icon"/>
    </div>
    <div class="col s4 center">
        <img src="https://microsoft.github.io/techcasestudies/images/Amadeus-Logo.png" class="icon">
    </div>
  </div>
</div>
